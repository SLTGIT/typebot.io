version: '3.9'

x-typebot-common: &typebot-common
  restart: always
  depends_on:
    typebot-redis:
      condition: service_healthy
    typebot-db:
      condition: service_healthy
  networks:
    - typebot-network
  env_file: .env
  environment:
    REDIS_URL: redis://typebot-redis:6379

services:
  caddy-gen:
    container_name: caddy-gen
    image: wemakeservices/caddy-gen:latest
    restart: always
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${PWD}/.typebot/caddy-certificates:/data/caddy
    ports:
      - '80:80'
      - '443:443'
    networks:
      - typebot-network
    depends_on:
      - typebot-builder
      - typebot-viewer

  typebot-db:
    image: postgres:16
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=typebot
      - POSTGRES_PASSWORD=typebot
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - typebot-network

  typebot-redis:
    image: redis:alpine
    restart: always
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis-data:/data
    networks:
      - typebot-network

  typebot-builder:
    <<: *typebot-common
    build:
      context: .
      args:
        - SCOPE=builder
    labels:
      virtual.host: 'testchat.sltechsoft.com'
      virtual.port: '3000'
      virtual.tls-email: 'admin@sltechsoft.com'
    networks:
      - typebot-network
    deploy:
      resources:
        limits:
          memory: 8g

  typebot-viewer:
    <<: *typebot-common
    build:
      context: .
      args:
        - SCOPE=viewer
    labels:
      virtual.host: 'testbot.sltechsoft.com'
      virtual.port: '3000'
      virtual.tls-email: 'admin@sltechsoft.com'
      virtual.proxy.directives: |
        flush_interval -1
    networks:
      - typebot-network
    deploy:
      resources:
        limits:
          memory: 8g

  minio:
    image: minio/minio
    command: server /data
    ports:
      - '9000:9000'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    networks:
      - typebot-network
    volumes:
      - s3-data:/data

  # This service just makes sure a bucket with the right policies is created
  createbuckets:
    image: minio/mc
    networks:
      - typebot-network
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add minio http://minio:9000 minio minio123;
      /usr/bin/mc mb minio/typebot;
      /usr/bin/mc anonymous set public minio/typebot/public;
      exit 0;
      "

networks:
  typebot-network:
    driver: bridge

volumes:
  db-data:
  redis-data:
  s3-data:

